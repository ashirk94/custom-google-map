/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/MapApplication.js":
/*!*******************************!*\
  !*** ./src/MapApplication.js ***!
  \*******************************/
/***/ (() => {

eval("const MapApplication = (function () {\r\n  const cache = [];\r\n\r\n  function MapApplication(conf) {\r\n    this.repo = conf.repository;\r\n    this.config = new MapConfiguration(conf);\r\n    this.features = []; // array of MapFeature objects.\r\n    this.map = null;\r\n    this.defaultMarkerCoordinates = this.config.mapOptions.center;\r\n    this.defaultMarkerSize =\r\n      this.config.mapOptions.defaultMarkerStyles.icon.scaledSize;\r\n  }\r\n\r\n  // Set up the maps script and initialize the map object\r\n  // Return the Promise\r\n  function init(fn) {\r\n    //load feature data after map\r\n    let results;\r\n    if (!!fn) {\r\n      results = Promise.all(\r\n        fn.map((func) => {\r\n          return func(this);\r\n        })\r\n      );\r\n    }\r\n\r\n    var apiKey = this.config.apiKey;\r\n\r\n    var p = new Promise(function (resolve, reject) {\r\n      let mapElement = document.createElement(\"script\");\r\n      mapElement.async = true;\r\n      mapElement.defer = true;\r\n      mapElement.src = \"https://maps.googleapis.com/maps/api/js?key=\" + apiKey;\r\n      mapElement.onload = resolve;\r\n\r\n      document.head.appendChild(mapElement);\r\n    });\r\n\r\n    var mapReady = p.then(() => {\r\n      // How do I extract data from the two params\r\n      //this.map = new google.maps.Map(document.getElementById(\"map\"), this.config.getConfig()); // This line renders the map to the screen\r\n      results.then(() => {\r\n        this.map = new google.maps.Map(\r\n          document.getElementById(\"map\"),\r\n          this.config.mapOptions\r\n        );\r\n      });\r\n    });\r\n\r\n    return mapReady;\r\n  }\r\n\r\n  function getCache(key) {\r\n    return cache[key];\r\n  }\r\n\r\n  function setCache(key, data) {\r\n    cache[key] = data;\r\n  }\r\n\r\n  // This gets called during startup\r\n  // Loads in the data for each feature\r\n  // Does not initialize all features, just prepares the data for each feature\r\n  function loadFeatureData() {\r\n    for (var MapFeature in this.features) {\r\n      // Set up the new feature\r\n      let feature = this.features[MapFeature];\r\n      //load markers after data, awaiting\r\n      feature.loadData().then(() => feature.loadMarkers());\r\n      feature.isInitialized = true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set up each feature, then call loadFeatureData()\r\n   *  to set up data for each feature\r\n   */\r\n  function loadFeatures(config) {\r\n    for (var name in config) {\r\n      // Set up the new feature\r\n      let f = new MapFeature(config[name]);\r\n      f.setMap(this);\r\n      this.features.push(f);\r\n    }\r\n  }\r\n  function hideFilters() {\r\n    document.getElementById(\"filters\").style.display = \"none\";\r\n  }\r\n  function showFilters() {\r\n    document.getElementById(\"filters\").style.display = \"block\";\r\n  }\r\n\r\n  function sortFeatureData() {\r\n    console.log(this.features);\r\n  }\r\n\r\n  // Google maps requires \"lat\" & \"lng\" fields\r\n  function setLocation(lat, lng) {\r\n    let coords = null == lng ? lat : this.toCoordinates(lat, lng);\r\n\r\n    return {\r\n      lat: coords.latitude,\r\n      lng: coords.longitude,\r\n    };\r\n  }\r\n\r\n  function toCoordinates(lat, lng) {\r\n    return {\r\n      lat: lat,\r\n      lng: lng,\r\n    };\r\n  }\r\n\r\n  // Pan will set the center point for the map\r\n  function pan(coordinates) {\r\n    let pos = {\r\n      lat: coordinates.latitude,\r\n      lng: coordinates.longitude,\r\n    };\r\n\r\n    // Set the new center position\r\n    this.map.setCenter(pos);\r\n  }\r\n\r\n  function isVisible(feature) {\r\n    // find the feature\r\n    let f = this.features.find((element) => element.name == feature);\r\n\r\n    console.log(f);\r\n    // check its map property\r\n    if (f.markers[0].map !== null) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  function addFeature(feature, callout) {\r\n    callout = callout || this.repository.from;\r\n    this.features.push(feature);\r\n  }\r\n\r\n  function removeFeature(feature) {\r\n    // Remove something from this.features.\r\n    // Once removed renderAll and hideAll won't have any effect on it.\r\n    // However, removing a feature should probably also \"hide\" it from the map.\r\n  }\r\n\r\n  /**\r\n   * Render any number of map features, layers, geometry or markers.\r\n   */\r\n  function showFeature(name) {\r\n    let f = this.getFeature(name);\r\n\r\n    if (!f) {\r\n      console.error(\"Could not locate Feature, \", name);\r\n      return;\r\n    }\r\n    f.render(this.map);\r\n  }\r\n\r\n  /**\r\n   * Hide keeps the data and the feature is still yet initialized.\r\n   */\r\n  function hideFeature(name) {\r\n    let f = this.getFeature(name);\r\n\r\n    if (!f) {\r\n      console.error(\"Could not locate Feature, \", name);\r\n      return;\r\n    }\r\n    f.hide();\r\n  }\r\n\r\n  function getFeature(name) {\r\n    return this.features.find((feature) => feature.name == name);\r\n  }\r\n\r\n  // Hide multiple features, i.e., all of this map's features.\r\n  function hideFeatures() {\r\n    // Set the map for each marker to null\r\n    for (let i = 0; i < this.features.length; i++) {\r\n      this.features[i].hide();\r\n    }\r\n  }\r\n\r\n  function getRoot() {\r\n    return document.getElementById(this.config.get(\"target\"));\r\n  }\r\n\r\n  // This will work through an array of coordinates and recenter the map to the coordinates\r\n  // Meant to replicate a users moving position\r\n  function replay(positions) {\r\n    // Set up a counter and a timer to replicate user movements\r\n    let counter = 0;\r\n    let replayTimer = setInterval(function () {\r\n      // Test to see if the end of the array has been met\r\n      if (counter == positions.length - 1) {\r\n        // Clear the timer, console log needed messages, and exit the function\r\n        clearInterval(replayTimer);\r\n        console.log(counter);\r\n        console.log(\"User position tracking has finished\");\r\n        return;\r\n      }\r\n\r\n      // Close any currently open userInfoWindows, pan to the new position\r\n      // Console.log the counter to keep track of positions and increment the counter\r\n      window.userInfoWindow.close();\r\n      pan(positions[counter]);\r\n      console.log(counter);\r\n      counter++;\r\n    }, 5000);\r\n  }\r\n\r\n  // Testing render here using new marker classes\r\n  function render(markers) {\r\n    markers = Array.isArray(markers) ? markers : [markers];\r\n\r\n    for (let i = 0; i < markers.length; i++) {\r\n      let marker = markers[i];\r\n      if (null == marker.position.lat && null == marker.position.lng) {\r\n        marker.setPosition(this.defaultMarkerCoordinates);\r\n        marker.setIconSize(this.defaultMarkerSize);\r\n      }\r\n      marker.createMarker().setMap(this.map);\r\n    }\r\n  }\r\n\r\n  var prototype = {\r\n    init: init,\r\n    replay: replay,\r\n    pan: pan,\r\n    getMap: function () {\r\n      return this.map;\r\n    },\r\n    getRoot: getRoot,\r\n    getCache: getCache,\r\n    setCache: setCache,\r\n    getFeature: getFeature,\r\n    showFeature: showFeature,\r\n    hideFeature: hideFeature,\r\n    showFilters: showFilters,\r\n    hideFilters: hideFilters,\r\n    loadFeatureData: loadFeatureData,\r\n    loadFeatures: loadFeatures,\r\n    isVisible: isVisible,\r\n    render: render,\r\n  };\r\n  MapApplication.prototype = prototype;\r\n\r\n  return MapApplication;\r\n})();\n\n//# sourceURL=webpack://custom-google-map/./src/MapApplication.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/MapApplication.js"]();
/******/ 	
/******/ })()
;